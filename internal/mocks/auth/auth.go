// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/auth/ports.go
//
// Generated by this command:
//
//	mockgen -destination=./internal/mocks/auth/auth.go -source=./internal/core/auth/ports.go -package=mockauth
//

// Package mockauth is a generated GoMock package.
package mockauth

import (
	reflect "reflect"

	auth "github.com/fallra1n/product-keeper/internal/core/auth"
	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthRepo) CreateUser(tx *sqlx.Tx, user auth.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthRepoMockRecorder) CreateUser(tx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthRepo)(nil).CreateUser), tx, user)
}

// FindPassword mocks base method.
func (m *MockAuthRepo) FindPassword(tx *sqlx.Tx, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPassword", tx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPassword indicates an expected call of FindPassword.
func (mr *MockAuthRepoMockRecorder) FindPassword(tx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPassword", reflect.TypeOf((*MockAuthRepo)(nil).FindPassword), tx, name)
}
