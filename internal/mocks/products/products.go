// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/products/ports.go
//
// Generated by this command:
//
//	mockgen -destination=./internal/mocks/products/products.go -source=./internal/core/products/ports.go -package=mockproducts
//

// Package mockproducts is a generated GoMock package.
package mockproducts

import (
	reflect "reflect"

	products "github.com/fallra1n/product-keeper/internal/core/products"
	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockProductsRepo is a mock of ProductsRepo interface.
type MockProductsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductsRepoMockRecorder
}

// MockProductsRepoMockRecorder is the mock recorder for MockProductsRepo.
type MockProductsRepoMockRecorder struct {
	mock *MockProductsRepo
}

// NewMockProductsRepo creates a new mock instance.
func NewMockProductsRepo(ctrl *gomock.Controller) *MockProductsRepo {
	mock := &MockProductsRepo{ctrl: ctrl}
	mock.recorder = &MockProductsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsRepo) EXPECT() *MockProductsRepoMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductsRepo) CreateProduct(tx *sqlx.Tx, product products.Product) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", tx, product)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductsRepoMockRecorder) CreateProduct(tx, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductsRepo)(nil).CreateProduct), tx, product)
}

// DeleteProduct mocks base method.
func (m *MockProductsRepo) DeleteProduct(tx *sqlx.Tx, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductsRepoMockRecorder) DeleteProduct(tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductsRepo)(nil).DeleteProduct), tx, id)
}

// FindProduct mocks base method.
func (m *MockProductsRepo) FindProduct(tx *sqlx.Tx, id uint64) (products.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProduct", tx, id)
	ret0, _ := ret[0].(products.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProduct indicates an expected call of FindProduct.
func (mr *MockProductsRepoMockRecorder) FindProduct(tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProduct", reflect.TypeOf((*MockProductsRepo)(nil).FindProduct), tx, id)
}

// FindProductList mocks base method.
func (m *MockProductsRepo) FindProductList(tx *sqlx.Tx, username, productName string, sortBy products.SortType) ([]products.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductList", tx, username, productName, sortBy)
	ret0, _ := ret[0].([]products.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductList indicates an expected call of FindProductList.
func (mr *MockProductsRepoMockRecorder) FindProductList(tx, username, productName, sortBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductList", reflect.TypeOf((*MockProductsRepo)(nil).FindProductList), tx, username, productName, sortBy)
}

// UpdateProduct mocks base method.
func (m *MockProductsRepo) UpdateProduct(tx *sqlx.Tx, newProduct products.Product) (products.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", tx, newProduct)
	ret0, _ := ret[0].(products.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductsRepoMockRecorder) UpdateProduct(tx, newProduct any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductsRepo)(nil).UpdateProduct), tx, newProduct)
}

// MockProductsStatistics is a mock of ProductsStatistics interface.
type MockProductsStatistics struct {
	ctrl     *gomock.Controller
	recorder *MockProductsStatisticsMockRecorder
}

// MockProductsStatisticsMockRecorder is the mock recorder for MockProductsStatistics.
type MockProductsStatisticsMockRecorder struct {
	mock *MockProductsStatistics
}

// NewMockProductsStatistics creates a new mock instance.
func NewMockProductsStatistics(ctrl *gomock.Controller) *MockProductsStatistics {
	mock := &MockProductsStatistics{ctrl: ctrl}
	mock.recorder = &MockProductsStatisticsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsStatistics) EXPECT() *MockProductsStatisticsMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockProductsStatistics) Send(p products.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockProductsStatisticsMockRecorder) Send(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProductsStatistics)(nil).Send), p)
}
